<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\HIGHER RESOLUTION\POWER.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\HIGHER RESOLUTION\POWER.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Nov 29 15:47:59 2018
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
uctsk_Disp &rArr; _recall &rArr; Rcl_set &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f1]">OS_CPU_SR_Save</a>
 <LI><a href="#[f4]">OS_CPU_SR_Restore</a>
 <LI><a href="#[185]">OSStartHighRdy</a>
 <LI><a href="#[19e]">OSCtxSw</a>
 <LI><a href="#[179]">OSIntCtxSw</a>
 <LI><a href="#[15]">PendSV_Handler</a>
 <LI><a href="#[231]">CPU_IntDis</a>
 <LI><a href="#[245]">CPU_IntEn</a>
 <LI><a href="#[246]">CPU_SR_Save</a>
 <LI><a href="#[247]">CPU_SR_Restore</a>
 <LI><a href="#[248]">CPU_CntLeadZeros</a>
 <LI><a href="#[249]">CPU_RevBits</a>
 <LI><a href="#[24a]">CPU_WaitForInt</a>
 <LI><a href="#[24b]">CPU_WaitForExcept</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[29]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[29]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6c]">App_TaskStart</a> from main.o(i.App_TaskStart) referenced from main.o(i.main)
 <LI><a href="#[11]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9b]">CALibration_CURRent</a> from scpi.o(i.CALibration_CURRent) referenced 4 times from scpi.o(.constdata)
 <LI><a href="#[9a]">CALibration_VOLTage</a> from scpi.o(i.CALibration_VOLTage) referenced 4 times from scpi.o(.constdata)
 <LI><a href="#[2c]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[82]">CH1_CURRent</a> from scpi.o(i.CH1_CURRent) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[8a]">CH1_VOLTage</a> from scpi.o(i.CH1_VOLTage) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[83]">CH2_CURRent</a> from scpi.o(i.CH2_CURRent) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[8b]">CH2_VOLTage</a> from scpi.o(i.CH2_VOLTage) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[6f]">CH3_MEAsure_VOLTage</a> from scpi.o(i.CH3_MEAsure_VOLTage) referenced 4 times from scpi.o(.constdata)
 <LI><a href="#[92]">CH3_VOLTage</a> from scpi.o(i.CH3_VOLTage) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[98]">CH3_read_STATus</a> from scpi.o(i.CH3_read_STATus) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[85]">CURRent</a> from scpi.o(i.CURRent) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[74]">CalParam_Cls</a> from usbtmc.o(i.CalParam_Cls) referenced from scpi.o(.constdata)
 <LI><a href="#[75]">CalParam_Store</a> from usbtmc.o(i.CalParam_Store) referenced from scpi.o(.constdata)
 <LI><a href="#[22]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">EP1_OUT_Callback</a> from usb_endp.o(i.EP1_OUT_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[1]">EP2_IN_Callback</a> from usb_endp.o(i.EP2_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[1d]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">EXTI2_IRQHandler</a> from stm32f10x_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[76]">INSTrument</a> from usbtmc.o(i.INSTrument) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[6d]">MEASure_CURRent</a> from scpi.o(i.MEASure_CURRent) referenced 4 times from scpi.o(.constdata)
 <LI><a href="#[70]">MEASure_POWEr</a> from scpi.o(i.MEASure_POWEr) referenced 4 times from scpi.o(.constdata)
 <LI><a href="#[91]">MEAsure_OCP</a> from scpi.o(i.MEAsure_OCP) referenced from scpi.o(.constdata)
 <LI><a href="#[90]">MEAsure_OVP</a> from scpi.o(i.MEAsure_OVP) referenced from scpi.o(.constdata)
 <LI><a href="#[6e]">MEAsure_VOLTage</a> from scpi.o(i.MEAsure_VOLTage) referenced 4 times from scpi.o(.constdata)
 <LI><a href="#[10]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">NOP_Process</a> from usb_core.o(i.NOP_Process) referenced 42 times from usb_istr.o(.data)
 <LI><a href="#[56]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[64]">OSTmr_Task</a> from os_tmr.o(i.OSTmr_Task) referenced from os_tmr.o(i.OSTmr_InitTask)
 <LI><a href="#[65]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[66]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[8d]">OUTPut_OCP</a> from scpi.o(i.OUTPut_OCP) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[8c]">OUTPut_OVP</a> from scpi.o(i.OUTPut_OVP) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[94]">OUTPut_STATe</a> from scpi.o(i.OUTPut_STATe) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[95]">OUTPut_TRACk</a> from scpi.o(i.OUTPut_TRACk) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[8f]">OVER_CURRENT</a> from scpi.o(i.OVER_CURRENT) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[8e]">OVER_VOLTage</a> from scpi.o(i.OVER_VOLTage) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[18]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[80]">Qry_CH1_CURRent</a> from scpi.o(i.Qry_CH1_CURRent) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[87]">Qry_CH1_VOLTage</a> from scpi.o(i.Qry_CH1_VOLTage) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[81]">Qry_CH2_CURRent</a> from scpi.o(i.Qry_CH2_CURRent) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[88]">Qry_CH2_VOLTage</a> from scpi.o(i.Qry_CH2_VOLTage) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[93]">Qry_CH3_VOLTage</a> from scpi.o(i.Qry_CH3_VOLTage) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[84]">Qry_CURRent</a> from scpi.o(i.Qry_CURRent) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[86]">Qry_VOLTage</a> from scpi.o(i.Qry_VOLTage) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[1c]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[73]">RCL</a> from scpi.o(i.RCL) referenced from scpi.o(.constdata)
 <LI><a href="#[40]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from stm32f10x_it.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7c]">ReadAll</a> from scpi.o(i.ReadAll) referenced from scpi.o(.constdata)
 <LI><a href="#[d]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[72]">SAV</a> from scpi.o(i.SAV) referenced from scpi.o(.constdata)
 <LI><a href="#[71]">SCPI_IDN</a> from scpi.o(i.SCPI_IDN) referenced from scpi.o(.constdata)
 <LI><a href="#[48]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[96]">SYSTem_ERRor</a> from scpi.o(i.SYSTem_ERRor) referenced 4 times from scpi.o(.constdata)
 <LI><a href="#[99]">SYSTem_STATus</a> from scpi.o(i.SYSTem_STATus) referenced 4 times from scpi.o(.constdata)
 <LI><a href="#[97]">SYSTem_VERSion</a> from scpi.o(i.SYSTem_VERSion) referenced 4 times from scpi.o(.constdata)
 <LI><a href="#[7e]">Serial_Query</a> from usbtmc.o(i.Serial_Query) referenced from scpi.o(.constdata)
 <LI><a href="#[7b]">Serial_Set</a> from usbtmc.o(i.Serial_Set) referenced from scpi.o(.constdata)
 <LI><a href="#[62]">Standard_GetConfiguration</a> from usb_core.o(i.Standard_GetConfiguration) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[63]">Standard_GetInterface</a> from usb_core.o(i.Standard_GetInterface) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[61]">Standard_GetStatus</a> from usb_core.o(i.Standard_GetStatus) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[16]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[19]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">USART1_IRQHandler</a> from use.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[79]">Upgrade_Rst</a> from usbtmc.o(i.Upgrade_Rst) referenced from scpi.o(.constdata)
 <LI><a href="#[12]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[89]">VOLTage</a> from scpi.o(i.VOLTage) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[7]">Virtual_Com_Port_Data_Setup</a> from usb_prop.o(i.Virtual_Com_Port_Data_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[b]">Virtual_Com_Port_GetConfigDescriptor</a> from usb_prop.o(i.Virtual_Com_Port_GetConfigDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[a]">Virtual_Com_Port_GetDeviceDescriptor</a> from usb_prop.o(i.Virtual_Com_Port_GetDeviceDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[67]">Virtual_Com_Port_GetLineCoding</a> from usb_prop.o(i.Virtual_Com_Port_GetLineCoding) referenced from usb_prop.o(i.Virtual_Com_Port_Data_Setup)
 <LI><a href="#[c]">Virtual_Com_Port_GetStringDescriptor</a> from usb_prop.o(i.Virtual_Com_Port_GetStringDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[9]">Virtual_Com_Port_Get_Interface_Setting</a> from usb_prop.o(i.Virtual_Com_Port_Get_Interface_Setting) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[8]">Virtual_Com_Port_NoData_Setup</a> from usb_prop.o(i.Virtual_Com_Port_NoData_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[4]">Virtual_Com_Port_Reset</a> from usb_prop.o(i.Virtual_Com_Port_Reset) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[68]">Virtual_Com_Port_SetLineCoding</a> from usb_prop.o(i.Virtual_Com_Port_SetLineCoding) referenced from usb_prop.o(i.Virtual_Com_Port_Data_Setup)
 <LI><a href="#[5]">Virtual_Com_Port_Status_In</a> from usb_prop.o(i.Virtual_Com_Port_Status_In) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[6]">Virtual_Com_Port_Status_Out</a> from usb_prop.o(i.Virtual_Com_Port_Status_Out) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[3]">Virtual_Com_Port_init</a> from usb_prop.o(i.Virtual_Com_Port_init) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[17]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[58]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[57]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[6b]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[7a]">cmd_KEY</a> from usbtmc.o(i.cmd_KEY) referenced from scpi.o(.constdata)
 <LI><a href="#[78]">cmd_count_reset</a> from usbtmc.o(i.cmd_count_reset) referenced from scpi.o(.constdata)
 <LI><a href="#[6a]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[59]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[53]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7f]">qry_INSTrument</a> from scpi.o(i.qry_INSTrument) referenced 2 times from scpi.o(.constdata)
 <LI><a href="#[7d]">qry_debug_flags</a> from usbtmc.o(i.qry_debug_flags) referenced from scpi.o(.constdata)
 <LI><a href="#[77]">qry_tst</a> from usbtmc.o(i.qry_tst) referenced from scpi.o(.constdata)
 <LI><a href="#[69]">response</a> from usb_prop.o(i.response) referenced from usb_prop.o(i.Virtual_Com_Port_Data_Setup)
 <LI><a href="#[5d]">uctsk_Disp</a> from uctsk_task.o(i.uctsk_Disp) referenced from uctsk_task.o(i.App_UCGUI_TaskCreate)
 <LI><a href="#[5f]">uctsk_Encode_key</a> from uctsk_task.o(i.uctsk_Encode_key) referenced from uctsk_task.o(i.App_UCGUI_TaskCreate)
 <LI><a href="#[60]">uctsk_Encode_key1</a> from uctsk_task.o(i.uctsk_Encode_key1) referenced from uctsk_task.o(i.App_UCGUI_TaskCreate)
 <LI><a href="#[5c]">uctsk_Led</a> from uctsk_task.o(i.uctsk_Led) referenced from uctsk_task.o(i.App_UCGUI_TaskCreate)
 <LI><a href="#[5b]">uctsk_Main</a> from uctsk_task.o(i.uctsk_Main) referenced from uctsk_task.o(i.App_UCGUI_TaskCreate)
 <LI><a href="#[5a]">uctsk_Measure</a> from uctsk_osmeasure.o(i.uctsk_Measure) referenced from uctsk_osmeasure.o(i.App_OSViewTaskCreate)
 <LI><a href="#[5e]">uctsk_Scpi</a> from uctsk_task.o(i.uctsk_Scpi) referenced from uctsk_task.o(i.App_UCGUI_TaskCreate)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[55]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[23f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[be]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[240]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[241]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[242]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[243]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[244]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH1
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TimeGetCycles
</UL>

<P><STRONG><a name="[f4]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH1
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TimeGetCycles
</UL>

<P><STRONG><a name="[185]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[19e]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[179]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[231]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[245]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDeviceCommand
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[59]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[234]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
</UL>

<P><STRONG><a name="[1df]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_para
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_int_para
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_rsp_msg_handler
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_cmd_msg_handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Set
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recall
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAV
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Set
</UL>

<P><STRONG><a name="[24c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[24d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_scpi_usart_main
</UL>

<P><STRONG><a name="[1de]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_scheduler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_initialise
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_cmd_msg_handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Set
</UL>

<P><STRONG><a name="[24f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_para
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_int_para
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTem_VERSion
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTem_ERRor
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_IDN
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAV
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAll
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCL
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH3_VOLTage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH2_VOLTage
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH2_CURRent
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH1_VOLTage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH1_CURRent
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVER_VOLTage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVER_CURRENT
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAsure_VOLTage
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAsure_OVP
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAsure_OCP
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASure_POWEr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASure_CURRent
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_read_STATus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_VOLTage
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_MEAsure_VOLTage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_VOLTage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_CURRent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_VOLTage
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_CURRent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_VOLTage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_CURRent
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_count_reset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_KEY
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Query
</UL>

<P><STRONG><a name="[a2]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAV
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCL
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTPut_TRACk
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_VOLTage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_CURRent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cls
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set_ch3
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Test
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Test
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_OVP_PAGE
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_start_set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Test
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set_ch3
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Disp_reflesh
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAll
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASure_POWEr
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_deal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set_ch3
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OVP
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OCP
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set_ch3
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set_ch3
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_deal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_OVP_MAIN
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch3_test_disp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_value_set
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set_ch3
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_volt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_power
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_curret
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_curret
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Disp_reflesh
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH3_VOLTage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_CURRent
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_CURRent
</UL>

<P><STRONG><a name="[250]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_deal
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_CH3_volt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_value_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_volt
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Cal_curret_set
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Volt_Disp
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_deal
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_CH3_volt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_value_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_volt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_power
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_curret
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_volt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_curret
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Cal_curret_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_CURRent
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_CURRent
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_deal
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OVP
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OCP
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcl_set
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set_ch3
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVER_VOLTage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVER_CURRENT
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_VOLTage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_VOLTage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_CURRent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_VOLTage
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_CURRent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_VOLTage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_CURRent
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[251]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_deal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcl_set
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalParam_deal
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_volt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_power
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_curret
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_curret
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Disp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_VOLTage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_VOLTage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_CURRent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_VOLTage
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_CURRent
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_OVP_MAIN
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_MAIN
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalParam_deal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_power
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_VOLTage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_VOLTage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_VOLTage
</UL>

<P><STRONG><a name="[252]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[253]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[254]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[a4]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[255]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[a6]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[af]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ae]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[256]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[257]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[c1]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[57]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[c3]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[258]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>AD7562_io</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, touchpanel.o(i.AD7562_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AD7562_io &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>ADS1118_Get_Voltage</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, touchpanel.o(i.ADS1118_Get_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADS1118_Get_Voltage &rArr; ADS1118_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS2
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS_ad
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
</UL>

<P><STRONG><a name="[cd]"></a>ADS1118_Get_Voltage_CH2</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, touchpanel.o(i.ADS1118_Get_Voltage_CH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADS1118_Get_Voltage_CH2 &rArr; ADS1118_Read_CH2
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS2
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS_ad
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Read_CH2
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
</UL>

<P><STRONG><a name="[cb]"></a>ADS1118_Read</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, touchpanel.o(i.ADS1118_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS1118_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS2
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Get_Voltage
</UL>

<P><STRONG><a name="[ce]"></a>ADS1118_Read_CH2</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, touchpanel.o(i.ADS1118_Read_CH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS1118_Read_CH2
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS2
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Get_Voltage_CH2
</UL>

<P><STRONG><a name="[d0]"></a>ADS1118_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, touchpanel.o(i.ADS1118_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADS1118_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS2
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>App_OSViewTaskCreate</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, uctsk_osmeasure.o(i.App_OSViewTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = App_OSViewTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreate
</UL>

<P><STRONG><a name="[188]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[d6]"></a>App_TaskCreateHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_apphooks.o(i.App_TaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[18e]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[190]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_apphooks.o(i.App_TaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[db]"></a>App_TaskSwHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_apphooks.o(i.App_TaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = App_TaskSwHook &rArr; OSView_TaskSwHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TaskSwHook
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[dd]"></a>App_TimeTickHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_apphooks.o(i.App_TimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = App_TimeTickHook &rArr; OSView_TickHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[d5]"></a>App_UCGUI_TaskCreate</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, uctsk_task.o(i.App_UCGUI_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = App_UCGUI_TaskCreate &rArr; OSTaskCreate &rArr; OS_TCBInit &rArr; OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreate
</UL>

<P><STRONG><a name="[e0]"></a>BEEP_RING</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.BEEP_RING))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BEEP_RING
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS1
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_deal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Test
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPutOff
</UL>

<P><STRONG><a name="[e2]"></a>BEEP_RING1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.BEEP_RING1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BEEP_RING1
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS1
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OVP
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OCP
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_cal_page
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[e3]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1c9]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1ca]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e4]"></a>ByteSwap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[9b]"></a>CALibration_CURRent</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, scpi.o(i.CALibration_CURRent))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CALibration_CURRent &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_para
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_int_para
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>CALibration_VOLTage</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, scpi.o(i.CALibration_VOLTage))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CALibration_VOLTage &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_para
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_int_para
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>CH1_CURRent</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, scpi.o(i.CH1_CURRent))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CH1_CURRent &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_para
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CURRent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>CH1_VOLTage</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, scpi.o(i.CH1_VOLTage))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CH1_VOLTage &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_para
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOLTage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>CH2DAC7562_WR</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, touchpanel.o(i.CH2DAC7562_WR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH2DAC7562_WR
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS2
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2DAC_Set
</UL>

<P><STRONG><a name="[f6]"></a>CH2DAC_Set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, touchpanel.o(i.CH2DAC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH2DAC_Set &rArr; CH2DAC7562_WR
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2DAC7562_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
</UL>

<P><STRONG><a name="[83]"></a>CH2_CURRent</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, scpi.o(i.CH2_CURRent))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CH2_CURRent &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_para
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CURRent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>CH2_VOLTage</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, scpi.o(i.CH2_VOLTage))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CH2_VOLTage &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_para
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOLTage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>CH3_ADS7040_Write_Read</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, touchpanel.o(i.CH3_ADS7040_Write_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH3_ADS7040_Write_Read &rArr; DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch3_ad_get_mean
</UL>

<P><STRONG><a name="[fe]"></a>CH3_AD_GPIO_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, touchpanel.o(i.CH3_AD_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH3_AD_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_ad_da_INIT
</UL>

<P><STRONG><a name="[ff]"></a>CH3_DA_SPI_Init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, touchpanel.o(i.CH3_DA_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH3_DA_SPI_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_ad_da_INIT
</UL>

<P><STRONG><a name="[6f]"></a>CH3_MEAsure_VOLTage</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, scpi.o(i.CH3_MEAsure_VOLTage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CH3_MEAsure_VOLTage &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>CH3_Measure</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, uctsk_osmeasure.o(i.CH3_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CH3_Measure &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch3_ad_get_mean
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
</UL>

<P><STRONG><a name="[105]"></a>CH3_TLV5623_Write</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, touchpanel.o(i.CH3_TLV5623_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CH3_TLV5623_Write &rArr; DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch3_da_test
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_set_Dac
</UL>

<P><STRONG><a name="[92]"></a>CH3_VOLTage</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, scpi.o(i.CH3_VOLTage))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CH3_VOLTage &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_para
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>CH3_ad_da_INIT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, touchpanel.o(i.CH3_ad_da_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH3_ad_da_INIT &rArr; CH3_DA_SPI_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_DA_SPI_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_AD_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>CH3_read_STATus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, scpi.o(i.CH3_read_STATus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CH3_read_STATus &rArr; usbtmc_response_cat &rArr; Scpi_write_data_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>CH3_set_Dac</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, touchpanel.o(i.CH3_set_Dac))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH3_set_Dac &rArr; CH3_TLV5623_Write &rArr; DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_TLV5623_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set_ch3
</UL>

<P><STRONG><a name="[109]"></a>CH3_value_set</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, main.o(i.CH3_value_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CH3_value_set &rArr; Select_CH3 &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_CH3
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
</UL>

<P><STRONG><a name="[10b]"></a>CTR_LP</STRONG> (Thumb, 530 bytes, Stack size 8 bytes, usb_int.o(i.CTR_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[85]"></a>CURRent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scpi.o(i.CURRent))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CURRent &rArr; CH2_CURRent &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_CURRent
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_CURRent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>CalParam_Cls</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbtmc.o(i.CalParam_Cls))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CalParam_Cls &rArr; cmd_cls &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_count_reset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>CalParam_Store</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbtmc.o(i.CalParam_Store))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CalParam_Store &rArr; PARA_Saved &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARA_Saved
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>CalParam_deal</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, key_board.o(i.CalParam_deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalParam_deal
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>Cal_Test</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, main.o(i.Cal_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Cal_Test &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OCP
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_VOLTage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_CURRent
</UL>

<P><STRONG><a name="[114]"></a>Cal_Volt_Disp</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mainpage.o(i.Cal_Volt_Disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Cal_Volt_Disp &rArr; HT1621_Disp_Cal_volt &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_volt
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_deal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_SET_PAGE
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_CAL_PAGE
</UL>

<P><STRONG><a name="[1e7]"></a>ClearDTOG_RX</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[1e5]"></a>ClearDTOG_TX</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[208]"></a>Clear_Status_Out</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_regs.o(i.Clear_Status_Out))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[116]"></a>Curr_Cur_Change</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, mainpage.o(i.Curr_Cur_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Curr_Cur_Change &rArr; Curr_Disp &rArr; HT1621_Disp_curret &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Curr_Disp
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Disp_reflesh
</UL>

<P><STRONG><a name="[119]"></a>DAC7562_WR</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, touchpanel.o(i.DAC7562_WR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DAC7562_WR &rArr; DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS2
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set
</UL>

<P><STRONG><a name="[11a]"></a>DAC_Set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, touchpanel.o(i.DAC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DAC_Set &rArr; DAC7562_WR &rArr; DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC7562_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
</UL>

<P><STRONG><a name="[14b]"></a>DELAY_MS</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.DELAY_MS))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataBit_1621
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_1621
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621ByteCH2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621Byte
</UL>

<P><STRONG><a name="[e1]"></a>DELAY_MS1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.DELAY_MS1))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Test
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING1
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING
</UL>

<P><STRONG><a name="[cc]"></a>DELAY_MS2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.DELAY_MS2))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OVP
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OCP
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Get_Voltage_CH2
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Get_Voltage
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC7562_WR
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2DAC7562_WR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Read_CH2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Read
</UL>

<P><STRONG><a name="[11b]"></a>DISP_CURRENT_CAL_DISP</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mainpage.o(i.DISP_CURRENT_CAL_DISP))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DISP_CURRENT_CAL_DISP &rArr; HT1621_Disp_Cal_curret &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_curret
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
</UL>

<P><STRONG><a name="[11d]"></a>DISP_POWER</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mainpage.o(i.DISP_POWER))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DISP_POWER &rArr; HT1621_Disp_power &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_power
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_OVP_PAGE
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Disp_reflesh
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH
</UL>

<P><STRONG><a name="[11f]"></a>DRAW_BEEPER_FLG</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, touchpanel.o(i.DRAW_BEEPER_FLG))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DRAW_BEEPER_FLG &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
</UL>

<P><STRONG><a name="[121]"></a>DRAW_CLEAR_OTP</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, touchpanel.o(i.DRAW_CLEAR_OTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DRAW_CLEAR_OTP &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealOTPMode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[122]"></a>DRAW_CLEAR_PARA</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, touchpanel.o(i.DRAW_CLEAR_PARA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DRAW_CLEAR_PARA &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_PARA
</UL>

<P><STRONG><a name="[123]"></a>DRAW_CLEAR_SER</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, touchpanel.o(i.DRAW_CLEAR_SER))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DRAW_CLEAR_SER &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_SER
</UL>

<P><STRONG><a name="[124]"></a>DRAW_LOCK_FLG</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, touchpanel.o(i.DRAW_LOCK_FLG))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DRAW_LOCK_FLG &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[125]"></a>DRAW_OVP_OCP_FLG</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, touchpanel.o(i.DRAW_OVP_OCP_FLG))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DRAW_OVP_OCP_FLG &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_main_page
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_cal_page
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[126]"></a>DRAW_SET_FLG</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, touchpanel.o(i.DRAW_SET_FLG))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DRAW_SET_FLG &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_ovp_page
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_main_page
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_cal_page
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[12f]"></a>DealOTPMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uctsk_task.o(i.DealOTPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DealOTPMode &rArr; DRAW_CLEAR_OTP &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_CLEAR_OTP
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>DelayUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, touchpanel.o(i.DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_ADS7040_Write_Read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd_CH2
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621ByteCH2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621Byte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC7562_WR
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_TLV5623_Write
</UL>

<P><STRONG><a name="[ca]"></a>DelayUS_ad</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, touchpanel.o(i.DelayUS_ad))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayUS_ad
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Get_Voltage_CH2
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Get_Voltage
</UL>

<P><STRONG><a name="[2]"></a>EP1_OUT_Callback</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_endp.o(i.EP1_OUT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EP1_OUT_Callback &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmm_set_scpi_Interface_type
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>EP2_IN_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_endp.o(i.EP2_IN_Callback))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_IRQHandler &rArr; usb_check
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARA_Saved
</UL>

<P><STRONG><a name="[139]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1b2]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[138]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARA_Saved
</UL>

<P><STRONG><a name="[1b3]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[22e]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[c6]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7562_io
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDisp_IO_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IO_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_IO_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_AD_GPIO_Init
</UL>

<P><STRONG><a name="[1f2]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[cf]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_check
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_real_disp
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Encode_key1
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Encode_key
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621ByteCH2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621Byte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Read_CH2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Read
</UL>

<P><STRONG><a name="[c7]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OVP
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OCP
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH1
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_ALL_ON
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Disp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_main_page
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_SER
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_PARA
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Test
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_ADS7040_Write_Read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7562_io
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_recall
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_CH3
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_value_set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING1
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Get_Voltage_CH2
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Get_Voltage
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPutOff
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataBit_1621
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd_CH2
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_1621
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621ByteCH2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621Byte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC7562_WR
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_TLV5623_Write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2DAC7562_WR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Read_CH2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Read
</UL>

<P><STRONG><a name="[c8]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OVP
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OCP
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH1
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_ALL_ON
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Disp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_main_page
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_SER
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_PARA
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Test
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_ADS7040_Write_Read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7562_io
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_recall
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_CH3
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING1
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Get_Voltage_CH2
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Get_Voltage
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPutOff
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Rst
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataBit_1621
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd_CH2
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_1621
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621ByteCH2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621Byte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC7562_WR
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_TLV5623_Write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_AD_GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2DAC7562_WR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Read_CH2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Read
</UL>

<P><STRONG><a name="[12c]"></a>GetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[130]"></a>GetEPRxCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_OUT_Callback
</UL>

<P><STRONG><a name="[128]"></a>GetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[113]"></a>HT1621_Cal_curret_set</STRONG> (Thumb, 640 bytes, Stack size 40 bytes, touchpanel.o(i.HT1621_Cal_curret_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HT1621_Cal_curret_set &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr1
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Curr_Disp
</UL>

<P><STRONG><a name="[141]"></a>HT1621_Clear_Save_count</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, touchpanel.o(i.HT1621_Clear_Save_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HT1621_Clear_Save_count &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[142]"></a>HT1621_Disp_CH3_volt</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, touchpanel.o(i.HT1621_Disp_CH3_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HT1621_Disp_CH3_volt &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr2
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch3_test_disp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_ch3_volt_Read
</UL>

<P><STRONG><a name="[11c]"></a>HT1621_Disp_Cal_curret</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, touchpanel.o(i.HT1621_Disp_Cal_curret))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HT1621_Disp_Cal_curret &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr1
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_CURRENT_CAL_DISP
</UL>

<P><STRONG><a name="[115]"></a>HT1621_Disp_Cal_volt</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, touchpanel.o(i.HT1621_Disp_Cal_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HT1621_Disp_Cal_volt &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr1
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Volt_Disp
</UL>

<P><STRONG><a name="[144]"></a>HT1621_Disp_ON_FLG</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, touchpanel.o(i.HT1621_Disp_ON_FLG))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HT1621_Disp_ON_FLG &rArr; WriteAll_1621_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH2
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_ALL_ON
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPutOff
</UL>

<P><STRONG><a name="[146]"></a>HT1621_Disp_Save_count</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, touchpanel.o(i.HT1621_Disp_Save_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HT1621_Disp_Save_count &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[118]"></a>HT1621_Disp_curret</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, touchpanel.o(i.HT1621_Disp_curret))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HT1621_Disp_curret &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Curr_Disp
</UL>

<P><STRONG><a name="[11e]"></a>HT1621_Disp_power</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, touchpanel.o(i.HT1621_Disp_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HT1621_Disp_power &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_POWER
</UL>

<P><STRONG><a name="[147]"></a>HT1621_Disp_volt</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, touchpanel.o(i.HT1621_Disp_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HT1621_Disp_volt &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Disp
</UL>

<P><STRONG><a name="[13b]"></a>HT1621_IO_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.HT1621_IO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HT1621_IO_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[148]"></a>HT1621_Test</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, touchpanel.o(i.HT1621_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HT1621_Test &rArr; HT1621_Disp_volt &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_BEEPER_FLG
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_value_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_volt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_power
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_curret
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_ON_FLG
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd_CH2
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14c]"></a>HT1621_clear_bit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, touchpanel.o(i.HT1621_clear_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HT1621_clear_bit &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH2
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621ByteCH2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_usb
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ch3_cc_cv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[14f]"></a>HT1621_set_bit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, touchpanel.o(i.HT1621_set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HT1621_set_bit &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH2
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621ByteCH2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_usb
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>INSTrument</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, usbtmc.o(i.INSTrument))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = INSTrument &rArr; strnmatch
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>IWDG_Configuration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.IWDG_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Rst
</UL>

<P><STRONG><a name="[155]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[154]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[152]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[153]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[151]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[10c]"></a>In0_Process</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usb_core.o(i.In0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[13d]"></a>Key_IO_init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, main.o(i.Key_IO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_IO_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[158]"></a>LedDispSelect1</STRONG> (Thumb, 2022 bytes, Stack size 24 bytes, uctsk_task.o(i.LedDispSelect1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LedDispSelect1 &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_disp_shan_flg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[13c]"></a>LedDisp_IO_init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, main.o(i.LedDisp_IO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LedDisp_IO_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[6d]"></a>MEASure_CURRent</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, scpi.o(i.MEASure_CURRent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MEASure_CURRent &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>MEASure_POWEr</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, scpi.o(i.MEASure_POWEr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MEASure_POWEr &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>MEAsure_OCP</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, scpi.o(i.MEAsure_OCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MEAsure_OCP &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>MEAsure_OVP</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, scpi.o(i.MEAsure_OVP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MEAsure_OVP &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>MEAsure_VOLTage</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, scpi.o(i.MEAsure_VOLTage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MEAsure_VOLTage &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>Main_Disp_reflesh</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, mainpage.o(i.Main_Disp_reflesh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Main_Disp_reflesh &rArr; Volt_Cur_Change &rArr; Volt_Disp &rArr; HT1621_Disp_volt &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_ch3_volt_Read
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_POWER
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cur_Change
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Curr_Cur_Change
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_MAIN
</UL>

<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>Mode_Disp</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, mainpage.o(i.Mode_Disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mode_Disp &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(i.NOP_Process))
<BR>[Address Reference Count : 2]<UL><LI> usb_istr.o(.data)
<LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[15e]"></a>NVIC_Configuration</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, rtc_time.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[160]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[15f]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[176]"></a>OSDebugInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_dbg.o(i.OSDebugInit))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[168]"></a>OSEventNameSet</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_core.o(i.OSEventNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[169]"></a>OSInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[175]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e9]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[17b]"></a>OSSchedUnlock</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[17d]"></a>OSSemCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[17f]"></a>OSSemPend</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[182]"></a>OSSemPost</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Main
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[184]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(i.OSStatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[187]"></a>OSTCBInitHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[df]"></a>OSTaskCreate</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit &rArr; OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UCGUI_TaskCreate
</UL>

<P><STRONG><a name="[d2]"></a>OSTaskCreateExt</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OSViewTaskCreate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[18c]"></a>OSTaskCreateHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[18d]"></a>OSTaskIdleHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[d3]"></a>OSTaskNameSet</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UCGUI_TaskCreate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OSViewTaskCreate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[18f]"></a>OSTaskStatHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStatHook
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[191]"></a>OSTaskStkChk</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[189]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[da]"></a>OSTaskSuspend</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[56]"></a>OSTaskSwHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTaskSwHook &rArr; App_TaskSwHook &rArr; OSView_TaskSwHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[186]"></a>OSTimeDly</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_real_disp
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Encode_key1
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Encode_key
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[192]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_real_disp
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Scpi
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Led
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[193]"></a>OSTimeTick</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[194]"></a>OSTimeTickHook</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[195]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmrSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[174]"></a>OSTmr_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d7]"></a>OSView_TaskCreateHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_view.o(i.OSView_TaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TimeGetCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>

<P><STRONG><a name="[dc]"></a>OSView_TaskSwHook</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_view.o(i.OSView_TaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSView_TaskSwHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TimeGetCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>

<P><STRONG><a name="[de]"></a>OSView_TickHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_view.o(i.OSView_TickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSView_TickHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TimeGetCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>

<P><STRONG><a name="[19a]"></a>OSView_TimeGetCycles</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, os_view.o(i.OSView_TimeGetCycles))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TickHook
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TaskSwHook
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TaskCreateHook
</UL>

<P><STRONG><a name="[19b]"></a>OSView_TmrRd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_viewc.o(i.OSView_TmrRd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TimeGetCycles
</UL>

<P><STRONG><a name="[d8]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, os_cpu_c.o(i.OS_CPU_SysTickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_CPU_SysTickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[183]"></a>OS_EventTaskRdy</STRONG> (Thumb, 128 bytes, Stack size 36 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[181]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[19d]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, os_core.o(i.OS_EventTaskRemoveMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[180]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[17e]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[16f]"></a>OS_FlagInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[196]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[170]"></a>OS_MemInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[171]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17c]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[18a]"></a>OS_TCBInit</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit &rArr; OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[65]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_TaskIdle &rArr; OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[66]"></a>OS_TaskStat</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[19f]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[18b]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[8d]"></a>OUTPut_OCP</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, scpi.o(i.OUTPut_OCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTPut_OCP &rArr; strnmatch
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>OUTPut_OVP</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, scpi.o(i.OUTPut_OVP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTPut_OVP &rArr; strnmatch
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>OUTPut_STATe</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, scpi.o(i.OUTPut_STATe))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTPut_STATe &rArr; strnmatch
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>OUTPut_TRACk</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, scpi.o(i.OUTPut_TRACk))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTPut_TRACk &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>OVER_CURRENT</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, scpi.o(i.OVER_CURRENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = OVER_CURRENT &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_int_para
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>OVER_VOLTage</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, scpi.o(i.OVER_VOLTage))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = OVER_VOLTage &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_int_para
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>Out0_Process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_core.o(i.Out0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Out0_Process &rArr; DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[1a0]"></a>OutPutOff</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, key_board.o(i.OutPutOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OutPutOff &rArr; SET_REFLESH_SET_PAGE &rArr; Volt_Disp &rArr; HT1621_Disp_volt &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH1
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_SET_PAGE
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_main_page
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_ON_FLG
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_OVP_MAIN
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_MAIN
</UL>

<P><STRONG><a name="[1a5]"></a>PAGE_CAL_MAIN</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mainpage.o(i.PAGE_CAL_MAIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PAGE_CAL_MAIN &rArr; SetReflsehAll &rArr; DISP_POWER &rArr; HT1621_Disp_power &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[1a7]"></a>PAGE_MAIN</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, mainpage.o(i.PAGE_MAIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = PAGE_MAIN &rArr; Main_Disp_reflesh &rArr; Volt_Cur_Change &rArr; Volt_Disp &rArr; HT1621_Disp_volt &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ovp_flg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ocp_flg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Disp_reflesh
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPutOff
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[1ab]"></a>PAGE_OVP_MAIN</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, mainpage.o(i.PAGE_OVP_MAIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = PAGE_OVP_MAIN &rArr; OutPutOff &rArr; SET_REFLESH_SET_PAGE &rArr; Volt_Disp &rArr; HT1621_Disp_volt &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ovp_flg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ocp_flg
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_ch3_volt_Read
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPutOff
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[22f]"></a>PARA_Read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, use.o(i.PARA_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PARA_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qry_tst
</UL>

<P><STRONG><a name="[110]"></a>PARA_Saved</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, use.o(i.PARA_Saved))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PARA_Saved &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_store
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalParam_Store
</UL>

<P><STRONG><a name="[12d]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, usb_mem.o(i.PMAToUserBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_OUT_Callback
</UL>

<P><STRONG><a name="[1bf]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[157]"></a>Post0_Process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_core.o(i.Post0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Post0_Process &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[209]"></a>PowerOn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usb_pwr.o(i.PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[1ad]"></a>PowerOn_Test</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, touchpanel.o(i.PowerOn_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PowerOn_Test &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS1
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd_CH2
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>Qry_CH1_CURRent</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, scpi.o(i.Qry_CH1_CURRent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Qry_CH1_CURRent &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CURRent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>Qry_CH1_VOLTage</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, scpi.o(i.Qry_CH1_VOLTage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Qry_CH1_VOLTage &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_VOLTage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>Qry_CH2_CURRent</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, scpi.o(i.Qry_CH2_CURRent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Qry_CH2_CURRent &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CURRent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>Qry_CH2_VOLTage</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, scpi.o(i.Qry_CH2_VOLTage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Qry_CH2_VOLTage &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_VOLTage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>Qry_CH3_VOLTage</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, scpi.o(i.Qry_CH3_VOLTage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Qry_CH3_VOLTage &rArr; floattostr2 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_VOLTage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>Qry_CURRent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scpi.o(i.Qry_CURRent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Qry_CURRent &rArr; Qry_CH2_CURRent &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH2_CURRent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH1_CURRent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>Qry_VOLTage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scpi.o(i.Qry_VOLTage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Qry_VOLTage &rArr; Qry_CH3_VOLTage &rArr; floattostr2 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH3_VOLTage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH2_VOLTage
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH1_VOLTage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1be]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[c5]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7562_io
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDisp_IO_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IO_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_IO_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_DA_SPI_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_AD_GPIO_Init
</UL>

<P><STRONG><a name="[e4]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_BackupResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[1cb]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1ae]"></a>RCC_Configuration</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, use.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1f3]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1ba]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[1bc]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1b4]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1b0]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1b6]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1b5]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1b9]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1b8]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1c1]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1c0]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1bb]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1e3]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_USBCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[1b1]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[73]"></a>RCL</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, scpi.o(i.RCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RCL &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_int_para
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1cc]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
</UL>

<P><STRONG><a name="[1cd]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
</UL>

<P><STRONG><a name="[1c6]"></a>RTC_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, stm32f10x_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c4]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_START
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1c8]"></a>RTC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtc_time.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Init &rArr; RTC_Configuration &rArr; BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>RTC_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1c3]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1c2]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1ce]"></a>Rcl_set</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, key_board.o(i.Rcl_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Rcl_set &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recall
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>ReadAll</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, scpi.o(i.ReadAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadAll &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflesh_Status
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>ReadHT1621Byte</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, touchpanel.o(i.ReadHT1621Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadHT1621Byte &rArr; SendBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_1621
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_set_bit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_clear_bit
</UL>

<P><STRONG><a name="[14e]"></a>ReadHT1621ByteCH2</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, touchpanel.o(i.ReadHT1621ByteCH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadHT1621ByteCH2 &rArr; SendBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_1621
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_set_bit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_clear_bit
</UL>

<P><STRONG><a name="[1cf]"></a>Reflesh_Status</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, scpi.o(i.Reflesh_Status))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTem_STATus
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAll
</UL>

<P><STRONG><a name="[1d1]"></a>Resume</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, usb_pwr.o(i.Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[1d2]"></a>Resume_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_pwr.o(i.Resume_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[72]"></a>SAV</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, scpi.o(i.SAV))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SAV &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_store
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_int_para
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>SCPI_IDN</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, scpi.o(i.SCPI_IDN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCPI_IDN &rArr; usbtmc_response_cat &rArr; Scpi_write_data_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>SET_REFLESH</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, mainpage.o(i.SET_REFLESH))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SET_REFLESH &rArr; DISP_POWER &rArr; HT1621_Disp_power &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_POWER
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Disp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Curr_Disp
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_deal
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_MAIN
</UL>

<P><STRONG><a name="[1d6]"></a>SET_REFLESH_CAL_PAGE</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mainpage.o(i.SET_REFLESH_CAL_PAGE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SET_REFLESH_CAL_PAGE &rArr; Cal_Curr_Disp &rArr; HT1621_Cal_curret_set &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Curr_Disp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Volt_Disp
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_deal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[1d7]"></a>SET_REFLESH_OVP_PAGE</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, mainpage.o(i.SET_REFLESH_OVP_PAGE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SET_REFLESH_OVP_PAGE &rArr; DISP_POWER &rArr; HT1621_Disp_power &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_POWER
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Disp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Curr_Disp
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_deal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[1a4]"></a>SET_REFLESH_SET_PAGE</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, mainpage.o(i.SET_REFLESH_SET_PAGE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SET_REFLESH_SET_PAGE &rArr; Volt_Disp &rArr; HT1621_Disp_volt &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Disp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Curr_Disp
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Curr_Disp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Volt_Disp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPutOff
</UL>

<P><STRONG><a name="[100]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_DA_SPI_Init
</UL>

<P><STRONG><a name="[fb]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_ADS7040_Write_Read
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_TLV5623_Write
</UL>

<P><STRONG><a name="[fd]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_ADS7040_Write_Read
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_TLV5623_Write
</UL>

<P><STRONG><a name="[fc]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_ADS7040_Write_Read
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_TLV5623_Write
</UL>

<P><STRONG><a name="[101]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_DA_SPI_Init
</UL>

<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>SYSTem_ERRor</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, scpi.o(i.SYSTem_ERRor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSTem_ERRor &rArr; usbtmc_response_cat &rArr; Scpi_write_data_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>SYSTem_STATus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, scpi.o(i.SYSTem_STATus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSTem_STATus &rArr; usbtmc_response_cat &rArr; Scpi_write_data_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflesh_Status
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wordToHexStr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>SYSTem_VERSion</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, scpi.o(i.SYSTem_VERSion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYSTem_VERSion &rArr; usbtmc_response_cat &rArr; Scpi_write_data_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>Scpi_write_data_usart</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, use.o(i.Scpi_write_data_usart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Scpi_write_data_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
</UL>

<P><STRONG><a name="[10a]"></a>Select_CH3</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, main.o(i.Select_CH3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Select_CH3 &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_value_set
</UL>

<P><STRONG><a name="[227]"></a>Select_CurrFine</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, uctsk_task.o(i.Select_CurrFine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Select_CurrFine
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cur_flg
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_ovp_page
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_main_page
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_cal_page
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_start_set
</UL>

<P><STRONG><a name="[226]"></a>Select_VoltFine</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, uctsk_task.o(i.Select_VoltFine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Select_VoltFine
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cur_flg
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_ovp_page
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_main_page
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_cal_page
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_start_set
</UL>

<P><STRONG><a name="[1dc]"></a>Select_recall</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, main.o(i.Select_recall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Select_recall
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[1d0]"></a>SendBit_1621</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, touchpanel.o(i.SendBit_1621))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd_CH2
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621ByteCH2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHT1621Byte
</UL>

<P><STRONG><a name="[149]"></a>SendCmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, touchpanel.o(i.SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendCmd &rArr; SendBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_1621
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Test
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
</UL>

<P><STRONG><a name="[14a]"></a>SendCmd_CH2</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, touchpanel.o(i.SendCmd_CH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendCmd_CH2 &rArr; SendBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_1621
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Test
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
</UL>

<P><STRONG><a name="[1dd]"></a>SendDataBit_1621</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, touchpanel.o(i.SendDataBit_1621))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621Byte_CH1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH2
</UL>

<P><STRONG><a name="[7e]"></a>Serial_Query</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbtmc.o(i.Serial_Query))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Serial_Query &rArr; usbtmc_response_cat &rArr; Scpi_write_data_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>Serial_Set</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, usbtmc.o(i.Serial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Serial_Set &rArr; set_store &rArr; PARA_Saved &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_store
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[204]"></a>SetBTABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.SetBTABLE))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[156]"></a>SetDeviceAddress</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, usb_core.o(i.SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[206]"></a>SetEPRxAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[1ac]"></a>SetEPRxCount</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[1fe]"></a>SetEPRxStatus</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_scheduler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCInitiateClear
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCInitiateAbortBulkOut
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[132]"></a>SetEPRxValid</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxValid))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_OUT_Callback
</UL>

<P><STRONG><a name="[207]"></a>SetEPTxAddr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPTxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[12a]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SEND
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[1e6]"></a>SetEPTxStatus</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCInitiateClear
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCInitiateAbortBulkIn
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[1f6]"></a>SetEPTxValid</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxValid))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SEND
</UL>

<P><STRONG><a name="[205]"></a>SetEPType</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPType
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[1a6]"></a>SetReflsehAll</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, mainpage.o(i.SetReflsehAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetReflsehAll &rArr; DISP_POWER &rArr; HT1621_Disp_power &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_CH3_volt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_POWER
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_CURRENT_CAL_DISP
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Disp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Curr_Disp
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Curr_Disp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Volt_Disp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_OVP_MAIN
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_MAIN
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_CAL_MAIN
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[1e2]"></a>Set_USBClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_pwr.o(i.Set_USBClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_USBClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>Setup0_Process</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, usb_core.o(i.Setup0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[165]"></a>Standard_ClearFeature</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, usb_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[62]"></a>Standard_GetConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[203]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetStringDescriptor
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetDeviceDescriptor
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetConfigDescriptor
</UL>

<P><STRONG><a name="[63]"></a>Standard_GetInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[61]"></a>Standard_GetStatus</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[163]"></a>Standard_SetConfiguration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[164]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[167]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usb_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[166]"></a>Standard_SetInterface</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1e8]"></a>TIMER_START</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc_time.o(i.TIMER_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_START
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSView_TmrRd
</UL>

<P><STRONG><a name="[3c]"></a>USART1_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, use.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmm_set_scpi_Interface_type
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1ef]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[1ec]"></a>USART_Config</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, usb_hwconfig.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART_Config &rArr; USART_Config_Default &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config_Default
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Status_In
</UL>

<P><STRONG><a name="[1ed]"></a>USART_Config_Default</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_hwconfig.o(i.USART_Config_Default))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Config_Default &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[1f1]"></a>USART_Configuration</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, use.o(i.USART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1db]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scpi_write_data_usart
</UL>

<P><STRONG><a name="[1ea]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1f0]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config_Default
</UL>

<P><STRONG><a name="[1ee]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config_Default
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[1eb]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scpi_write_data_usart
</UL>

<P><STRONG><a name="[22c]"></a>USB_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_init.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f4]"></a>USB_Istr</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, usb_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2b]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f5]"></a>USB_SEND</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usb_hwconfig.o(i.USB_SEND))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_SEND &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_rsp_msg_handler
</UL>

<P><STRONG><a name="[79]"></a>Upgrade_Rst</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbtmc.o(i.Upgrade_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Upgrade_Rst &rArr; IWDG_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[202]"></a>UsbTMC488ReadStatusByte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbtmc.o(i.UsbTMC488ReadStatusByte))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Data_Setup
</UL>

<P><STRONG><a name="[1f7]"></a>UsbTMCCheckAbortBulkInStatus</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, usbtmc.o(i.UsbTMCCheckAbortBulkInStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UsbTMCCheckAbortBulkInStatus &rArr; toLittleEndian
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Data_Setup
</UL>

<P><STRONG><a name="[1f9]"></a>UsbTMCCheckAbortBulkOutStatus</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, usbtmc.o(i.UsbTMCCheckAbortBulkOutStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UsbTMCCheckAbortBulkOutStatus &rArr; toLittleEndian
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Data_Setup
</UL>

<P><STRONG><a name="[1fa]"></a>UsbTMCCheckClearStatus</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, usbtmc.o(i.UsbTMCCheckClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UsbTMCCheckClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_clear_done
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Data_Setup
</UL>

<P><STRONG><a name="[1fc]"></a>UsbTMCInitiateAbortBulkIn</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usbtmc.o(i.UsbTMCInitiateAbortBulkIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UsbTMCInitiateAbortBulkIn &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Data_Setup
</UL>

<P><STRONG><a name="[1fd]"></a>UsbTMCInitiateAbortBulkOut</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, usbtmc.o(i.UsbTMCInitiateAbortBulkOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UsbTMCInitiateAbortBulkOut &rArr; SetEPRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Data_Setup
</UL>

<P><STRONG><a name="[1ff]"></a>UsbTMCInitiateClear</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbtmc.o(i.UsbTMCInitiateClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsbTMCInitiateClear &rArr; device_clear &rArr; usbtmc_initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Data_Setup
</UL>

<P><STRONG><a name="[129]"></a>UserToPMABufferCopy</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, usb_mem.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SEND
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[89]"></a>VOLTage</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scpi.o(i.VOLTage))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = VOLTage &rArr; CH2_VOLTage &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_VOLTage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_VOLTage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[7]"></a>Virtual_Com_Port_Data_Setup</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, usb_prop.o(i.Virtual_Com_Port_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Virtual_Com_Port_Data_Setup &rArr; setup_req_handler &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_req_handler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCInitiateClear
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCInitiateAbortBulkOut
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCInitiateAbortBulkIn
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCCheckClearStatus
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCCheckAbortBulkOutStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCCheckAbortBulkInStatus
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMC488ReadStatusByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Virtual_Com_Port_GetConfigDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_GetConfigDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Virtual_Com_Port_GetDeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_GetDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>Virtual_Com_Port_GetLineCoding</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_GetLineCoding))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.Virtual_Com_Port_Data_Setup)
</UL>
<P><STRONG><a name="[c]"></a>Virtual_Com_Port_GetStringDescriptor</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usb_prop.o(i.Virtual_Com_Port_GetStringDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Virtual_Com_Port_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Virtual_Com_Port_Get_Interface_Setting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Virtual_Com_Port_NoData_Setup</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_NoData_Setup))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Virtual_Com_Port_Reset</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Virtual_Com_Port_Reset &rArr; SetDeviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>Virtual_Com_Port_SetLineCoding</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_SetLineCoding))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.Virtual_Com_Port_Data_Setup)
</UL>
<P><STRONG><a name="[5]"></a>Virtual_Com_Port_Status_In</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_Status_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Virtual_Com_Port_Status_In &rArr; USART_Config &rArr; USART_Config_Default &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Virtual_Com_Port_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_Status_Out))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Virtual_Com_Port_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Virtual_Com_Port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[15b]"></a>Volt_Cur_Change</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, mainpage.o(i.Volt_Cur_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Volt_Cur_Change &rArr; Volt_Disp &rArr; HT1621_Disp_volt &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Disp
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Disp_reflesh
</UL>

<P><STRONG><a name="[13f]"></a>WriteAll_1621Byte_CH1</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, touchpanel.o(i.WriteAll_1621Byte_CH1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteAll_1621Byte_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataBit_1621
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_1621
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDispSelect1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Test
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_volt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_power
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_curret
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_volt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_curret
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Cal_curret_set
</UL>

<P><STRONG><a name="[140]"></a>WriteAll_1621Byte_CH2</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, touchpanel.o(i.WriteAll_1621Byte_CH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataBit_1621
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_1621
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Save_count
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_CH3_volt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Clear_Save_count
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDispSelect1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Test
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_volt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_power
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_curret
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_volt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_curret
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Cal_curret_set
</UL>

<P><STRONG><a name="[120]"></a>WriteAll_1621_CH1</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, touchpanel.o(i.WriteAll_1621_CH1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataBit_1621
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_1621
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_ALL_ON
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Disp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_set_bit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_clear_bit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_SET_FLG
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_OVP_OCP_FLG
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_LOCK_FLG
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_CLEAR_SER
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_CLEAR_PARA
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_CLEAR_OTP
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_BEEPER_FLG
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_CH3
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ovp_flg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ocp_flg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPutOff
</UL>

<P><STRONG><a name="[145]"></a>WriteAll_1621_CH2</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, touchpanel.o(i.WriteAll_1621_CH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteAll_1621_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataBit_1621
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_1621
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_set_bit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_clear_bit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_ON_FLG
</UL>

<P><STRONG><a name="[20a]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25a]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[230]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25b]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[25c]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[20c]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25d]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[107]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTem_ERRor
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAll
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_read_STATus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr1
</UL>

<P><STRONG><a name="[25e]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[25f]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[260]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[212]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[261]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[262]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[263]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[213]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[c2]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[211]"></a>_recall</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, key_board.o(i._recall))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _recall &rArr; Rcl_set &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcl_set
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[e8]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcl_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVER_VOLTage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVER_CURRENT
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_VOLTage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_VOLTage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_CURRent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_VOLTage
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_CURRent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_VOLTage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_CURRent
</UL>

<P><STRONG><a name="[104]"></a>ch3_ad_get_mean</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, touchpanel.o(i.ch3_ad_get_mean))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ch3_ad_get_mean &rArr; CH3_ADS7040_Write_Read &rArr; DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_ADS7040_Write_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
</UL>

<P><STRONG><a name="[214]"></a>ch3_da_test</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, touchpanel.o(i.ch3_da_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ch3_da_test &rArr; CH3_TLV5623_Write &rArr; DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_TLV5623_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[215]"></a>ch3_test_disp</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, touchpanel.o(i.ch3_test_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ch3_test_disp &rArr; HT1621_Disp_CH3_volt &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_CH3_volt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>check_int_para</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, scpi.o(i.check_int_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_int_para
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAV
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCL
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVER_VOLTage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVER_CURRENT
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_VOLTage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_CURRent
</UL>

<P><STRONG><a name="[e7]"></a>check_para</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, scpi.o(i.check_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_para
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_VOLTage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_VOLTage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_CURRent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_VOLTage
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_CURRent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_VOLTage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_CURRent
</UL>

<P><STRONG><a name="[216]"></a>clear_ch3_cc_cv</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uctsk_task.o(i.clear_ch3_cc_cv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clear_ch3_cc_cv &rArr; HT1621_clear_bit &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_ALL_ON
</UL>

<P><STRONG><a name="[159]"></a>clear_disp_shan_flg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uctsk_task.o(i.clear_disp_shan_flg))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDispSelect1
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[217]"></a>clear_usb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uctsk_task.o(i.clear_usb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clear_usb &rArr; HT1621_clear_bit &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[7a]"></a>cmd_KEY</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbtmc.o(i.cmd_KEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmd_KEY &rArr; usbtmc_response_cat &rArr; Scpi_write_data_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>cmd_cls</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbtmc.o(i.cmd_cls))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cmd_cls &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalParam_Cls
</UL>

<P><STRONG><a name="[78]"></a>cmd_count_reset</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbtmc.o(i.cmd_count_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmd_count_reset &rArr; usbtmc_response_cat &rArr; Scpi_write_data_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalParam_Cls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[218]"></a>deal_ALL_ON</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, key_board.o(i.deal_ALL_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = deal_ALL_ON &rArr; clear_ch3_cc_cv &rArr; HT1621_clear_bit &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH1
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_main_page
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ch3_cc_cv
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_advalue
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_ON_FLG
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[1a2]"></a>deal_CH1</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, key_board.o(i.deal_CH1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = deal_CH1
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_ALL_ON
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_SER
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_PARA
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPutOff
</UL>

<P><STRONG><a name="[1a3]"></a>deal_CH2</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, key_board.o(i.deal_CH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = deal_CH2
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_ALL_ON
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_SER
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_PARA
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPutOff
</UL>

<P><STRONG><a name="[21a]"></a>deal_OCP</STRONG> (Thumb, 710 bytes, Stack size 40 bytes, key_board.o(i.deal_OCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = deal_OCP &rArr; Cal_Test &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Test
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING1
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[21b]"></a>deal_OVP</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, key_board.o(i.deal_OVP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = deal_OVP &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS2
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING1
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[21c]"></a>deal_PARA</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, key_board.o(i.deal_PARA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = deal_PARA &rArr; DRAW_CLEAR_PARA &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_CLEAR_PARA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21d]"></a>deal_SER</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, key_board.o(i.deal_SER))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = deal_SER &rArr; DRAW_CLEAR_SER &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_CLEAR_SER
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21e]"></a>deal_real_disp</STRONG> (Thumb, 524 bytes, Stack size 8 bytes, uctsk_task.o(i.deal_real_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = deal_real_disp &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Main
</UL>

<P><STRONG><a name="[21f]"></a>deal_scpi_usart_main</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbtmc.o(i.deal_scpi_usart_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = deal_scpi_usart_main &rArr; parseDeviceCommand &rArr; strnmatch
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDeviceCommand
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Scpi
</UL>

<P><STRONG><a name="[200]"></a>device_clear</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbtmc.o(i.device_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = device_clear &rArr; usbtmc_initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCInitiateClear
</UL>

<P><STRONG><a name="[1fb]"></a>device_clear_done</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbtmc.o(i.device_clear_done))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCCheckClearStatus
</UL>

<P><STRONG><a name="[233]"></a>device_status_update</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usbtmc.o(i.device_status_update))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_scheduler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_event
</UL>

<P><STRONG><a name="[15c]"></a>disp_ch3_volt_Read</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mainpage.o(i.disp_ch3_volt_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = disp_ch3_volt_Read &rArr; HT1621_Disp_CH3_volt &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_CH3_volt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_OVP_MAIN
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Disp_reflesh
</UL>

<P><STRONG><a name="[239]"></a>dmm_get_scpi_Interface_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scpi.o(i.dmm_get_scpi_Interface_type))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
</UL>

<P><STRONG><a name="[131]"></a>dmm_set_scpi_Interface_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scpi.o(i.dmm_set_scpi_Interface_type))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_OUT_Callback
</UL>

<P><STRONG><a name="[222]"></a>down_deal</STRONG> (Thumb, 1218 bytes, Stack size 32 bytes, key_board.o(i.down_deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = down_deal &rArr; SET_REFLESH_CAL_PAGE &rArr; Cal_Curr_Disp &rArr; HT1621_Cal_curret_set &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_OVP_PAGE
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_CAL_PAGE
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Volt_Disp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[1aa]"></a>draw_ocp_flg</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, touchpanel.o(i.draw_ocp_flg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = draw_ocp_flg &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_OVP_MAIN
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_MAIN
</UL>

<P><STRONG><a name="[1a9]"></a>draw_ovp_flg</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, touchpanel.o(i.draw_ovp_flg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = draw_ovp_flg &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAll_1621_CH1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_OVP_MAIN
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_MAIN
</UL>

<P><STRONG><a name="[223]"></a>draw_usb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uctsk_task.o(i.draw_usb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = draw_usb &rArr; HT1621_set_bit &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[224]"></a>enter_cal_page</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, uctsk_task.o(i.enter_cal_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enter_cal_page &rArr; DRAW_SET_FLG &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_SET_FLG
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_OVP_OCP_FLG
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cur_flg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_VoltFine
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_CurrFine
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING1
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[1a1]"></a>enter_main_page</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, uctsk_task.o(i.enter_main_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enter_main_page &rArr; DRAW_SET_FLG &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_SET_FLG
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_OVP_OCP_FLG
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cur_flg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_VoltFine
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_CurrFine
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_ALL_ON
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutPutOff
</UL>

<P><STRONG><a name="[228]"></a>enter_ovp_page</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, uctsk_task.o(i.enter_ovp_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enter_ovp_page &rArr; DRAW_SET_FLG &rArr; WriteAll_1621_CH1 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_SET_FLG
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_VoltFine
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_CurrFine
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[23c]"></a>expiredIndPulseTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbtmc.o(i.expiredIndPulseTimer))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_scheduler
</UL>

<P><STRONG><a name="[ee]"></a>floattostr</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, touchpanel.o(i.floattostr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcl_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_volt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_power
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_curret
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAll
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH2_VOLTage
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH2_CURRent
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH1_VOLTage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH1_CURRent
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAsure_VOLTage
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAsure_OVP
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAsure_OCP
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASure_POWEr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASure_CURRent
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_VOLTage
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_MEAsure_VOLTage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_VOLTage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_CURRent
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_VOLTage
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_CURRent
</UL>

<P><STRONG><a name="[13e]"></a>floattostr1</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, touchpanel.o(i.floattostr1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floattostr1 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_volt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Cal_curret
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Cal_curret_set
</UL>

<P><STRONG><a name="[143]"></a>floattostr2</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, touchpanel.o(i.floattostr2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floattostr2 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_CH3_volt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH3_VOLTage
</UL>

<P><STRONG><a name="[6a]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[f8]"></a>func_set</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, touchpanel.o(i.func_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = func_set &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2DAC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
</UL>

<P><STRONG><a name="[22a]"></a>func_set_ch3</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, touchpanel.o(i.func_set_ch3))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = func_set_ch3 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_set_Dac
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
</UL>

<P><STRONG><a name="[23e]"></a>hexitoc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbtmc.o(i.hexitoc))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wordToHexStr
</UL>

<P><STRONG><a name="[219]"></a>init_advalue</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uctsk_osmeasure.o(i.init_advalue))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_ALL_ON
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[225]"></a>init_cur_flg</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, uctsk_task.o(i.init_cur_flg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_cur_flg &rArr; Select_VoltFine
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_VoltFine
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_CurrFine
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_main_page
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_cal_page
</UL>

<P><STRONG><a name="[22b]"></a>key_scan</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, main.o(i.key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Main
</UL>

<P><STRONG><a name="[53]"></a>main</STRONG> (Thumb, 628 bytes, Stack size 48 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = main &rArr; Rcl_set &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_initialise
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_start_set
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_advalue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_SER
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_PARA
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch3_test_disp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch3_da_test
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_START
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcl_set
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Test
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARA_Read
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Test
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalParam_deal
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_ad_da_INIT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_ADS7040_Write_Read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7562_io
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS1
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[22d]"></a>para_start_set</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, uctsk_task.o(i.para_start_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = para_start_set &rArr; Select_VoltFine
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_VoltFine
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_CurrFine
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[220]"></a>parseDeviceCommand</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, usbtmc.o(i.parseDeviceCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = parseDeviceCommand &rArr; strnmatch
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnmatch
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_event
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_scheduler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_scpi_usart_main
</UL>

<P><STRONG><a name="[23d]"></a>parseVendorCommand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbtmc.o(i.parseVendorCommand))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_scheduler
</UL>

<P><STRONG><a name="[7f]"></a>qry_INSTrument</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, scpi.o(i.qry_INSTrument))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = qry_INSTrument &rArr; usbtmc_response_cat &rArr; Scpi_write_data_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_response_cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>qry_debug_flags</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbtmc.o(i.qry_debug_flags))
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>qry_tst</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbtmc.o(i.qry_tst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qry_tst &rArr; PARA_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARA_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scpi.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>response</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_prop.o(i.response))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.Virtual_Com_Port_Data_Setup)
</UL>
<P><STRONG><a name="[1d4]"></a>set_store</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, key_board.o(i.set_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = set_store &rArr; PARA_Saved &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARA_Saved
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAV
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Set
</UL>

<P><STRONG><a name="[201]"></a>setup_req_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usbtmc.o(i.setup_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setup_req_handler &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Data_Setup
</UL>

<P><STRONG><a name="[232]"></a>signal_event</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usbtmc.o(i.signal_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = signal_event
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_status_update
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_scheduler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDeviceCommand
</UL>

<P><STRONG><a name="[e9]"></a>strnmatch</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, usbtmc.o(i.strnmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strnmatch
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVER_VOLTage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OVER_CURRENT
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTPut_STATe
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTPut_OVP
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTPut_OCP
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAsure_VOLTage
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAsure_OVP
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAsure_OCP
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASure_POWEr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASure_CURRent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_VOLTage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALibration_CURRent
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDeviceCommand
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTrument
</UL>

<P><STRONG><a name="[1f8]"></a>toLittleEndian</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbtmc.o(i.toLittleEndian))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = toLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_rsp_msg_handler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCCheckAbortBulkOutStatus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbTMCCheckAbortBulkInStatus
</UL>

<P><STRONG><a name="[235]"></a>up_deal</STRONG> (Thumb, 1230 bytes, Stack size 32 bytes, key_board.o(i.up_deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = up_deal &rArr; SET_REFLESH_CAL_PAGE &rArr; Cal_Curr_Disp &rArr; HT1621_Cal_curret_set &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_OVP_PAGE
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_CAL_PAGE
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Volt_Disp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Disp
</UL>

<P><STRONG><a name="[135]"></a>usb_check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uctsk_task.o(i.usb_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_check
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[237]"></a>usbtmc_cmd_msg_handler</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, usbtmc.o(i.usbtmc_cmd_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbtmc_cmd_msg_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_command_cat
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_scheduler
</UL>

<P><STRONG><a name="[238]"></a>usbtmc_command_cat</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, usbtmc.o(i.usbtmc_command_cat))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_cmd_msg_handler
</UL>

<P><STRONG><a name="[221]"></a>usbtmc_initialise</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, usbtmc.o(i.usbtmc_initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbtmc_initialise
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_scheduler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_clear
</UL>

<P><STRONG><a name="[102]"></a>usbtmc_response_cat</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbtmc.o(i.usbtmc_response_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbtmc_response_cat &rArr; Scpi_write_data_usart
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scpi_write_data_usart
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmm_get_scpi_Interface_type
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qry_INSTrument
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTem_VERSion
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTem_STATus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTem_ERRor
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCPI_IDN
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAll
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH3_VOLTage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH2_VOLTage
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH2_CURRent
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH1_VOLTage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qry_CH1_CURRent
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAsure_VOLTage
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAsure_OVP
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEAsure_OCP
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASure_POWEr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASure_CURRent
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_read_STATus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_MEAsure_VOLTage
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDeviceCommand
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_count_reset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_KEY
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Query
</UL>

<P><STRONG><a name="[23a]"></a>usbtmc_rsp_msg_handler</STRONG> (Thumb, 700 bytes, Stack size 24 bytes, usbtmc.o(i.usbtmc_rsp_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbtmc_rsp_msg_handler &rArr; USB_SEND &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SEND
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toLittleEndian
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_scheduler
</UL>

<P><STRONG><a name="[236]"></a>usbtmc_scheduler</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, usbtmc.o(i.usbtmc_scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usbtmc_scheduler &rArr; parseDeviceCommand &rArr; strnmatch
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_initialise
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_task_abort_bulk_in
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_rsp_msg_handler
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_cmd_msg_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_event
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseVendorCommand
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDeviceCommand
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expiredIndPulseTimer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_status_update
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Scpi
</UL>

<P><STRONG><a name="[23b]"></a>usbtmc_task_abort_bulk_in</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbtmc.o(i.usbtmc_task_abort_bulk_in))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_scheduler
</UL>

<P><STRONG><a name="[1d8]"></a>wordToHexStr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbtmc.o(i.wordToHexStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wordToHexStr
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexitoc
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTem_STATus
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d4]"></a>App_TaskCreate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.App_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = App_TaskCreate &rArr; App_OSViewTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UCGUI_TaskCreate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OSViewTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[6c]"></a>App_TaskStart</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.App_TaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = App_TaskStart &rArr; App_TaskCreate &rArr; App_OSViewTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[13a]"></a>GPIO_Configuration</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, main.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_Configuration &rArr; LedDisp_IO_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDisp_IO_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IO_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_IO_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>uctsk_Disp</STRONG> (Thumb, 6300 bytes, Stack size 48 bytes, uctsk_task.o(i.uctsk_Disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = uctsk_Disp &rArr; _recall &rArr; Rcl_set &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_deal
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_store
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_deal
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OVP
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_OCP
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH2
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_CH1
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_ALL_ON
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recall
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_SET_PAGE
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_OVP_PAGE
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_CAL_PAGE
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_OVP_MAIN
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_MAIN
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGE_CAL_MAIN
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Disp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_set_bit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_clear_bit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_Save_count
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_CH3_volt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Clear_Save_count
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_SET_FLG
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_OVP_OCP_FLG
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_LOCK_FLG
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_CLEAR_SER
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_CLEAR_PARA
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_CLEAR_OTP
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRAW_BEEPER_FLG
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalParam_Store
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_ovp_page
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_main_page
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_cal_page
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_usb
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_usb
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_disp_shan_flg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_VoltFine
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_CurrFine
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedDispSelect1
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealOTPMode
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_SER
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_PARA
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARA_Read
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_recall
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_CH3
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_value_set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING1
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_RING
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uctsk_task.o(i.App_UCGUI_TaskCreate)
</UL>
<P><STRONG><a name="[5f]"></a>uctsk_Encode_key</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, uctsk_task.o(i.uctsk_Encode_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = uctsk_Encode_key &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uctsk_task.o(i.App_UCGUI_TaskCreate)
</UL>
<P><STRONG><a name="[60]"></a>uctsk_Encode_key1</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, uctsk_task.o(i.uctsk_Encode_key1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = uctsk_Encode_key1 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uctsk_task.o(i.App_UCGUI_TaskCreate)
</UL>
<P><STRONG><a name="[5c]"></a>uctsk_Led</STRONG> (Thumb, 294 bytes, Stack size 0 bytes, uctsk_task.o(i.uctsk_Led))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = uctsk_Led &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uctsk_task.o(i.App_UCGUI_TaskCreate)
</UL>
<P><STRONG><a name="[5b]"></a>uctsk_Main</STRONG> (Thumb, 758 bytes, Stack size 0 bytes, uctsk_task.o(i.uctsk_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = uctsk_Main &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_real_disp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uctsk_task.o(i.App_UCGUI_TaskCreate)
</UL>
<P><STRONG><a name="[5e]"></a>uctsk_Scpi</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uctsk_task.o(i.uctsk_Scpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = uctsk_Scpi &rArr; usbtmc_scheduler &rArr; parseDeviceCommand &rArr; strnmatch
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbtmc_scheduler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_scpi_usart_main
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uctsk_task.o(i.App_UCGUI_TaskCreate)
</UL>
<P><STRONG><a name="[1bd]"></a>RTC_Configuration</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rtc_time.o(i.RTC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Configuration &rArr; BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[112]"></a>Cal_Curr_Disp</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, mainpage.o(i.Cal_Curr_Disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Cal_Curr_Disp &rArr; HT1621_Cal_curret_set &rArr; WriteAll_1621Byte_CH2 &rArr; SendDataBit_1621
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Cal_curret_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_SET_PAGE
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_CAL_PAGE
</UL>

<P><STRONG><a name="[117]"></a>Curr_Disp</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mainpage.o(i.Curr_Disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Curr_Disp &rArr; HT1621_Disp_curret &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_curret
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_SET_PAGE
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_OVP_PAGE
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Curr_Cur_Change
</UL>

<P><STRONG><a name="[1d5]"></a>Volt_Disp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mainpage.o(i.Volt_Disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Volt_Disp &rArr; HT1621_Disp_volt &rArr; floattostr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621_Disp_volt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReflsehAll
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_SET_PAGE
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH_OVP_PAGE
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Volt_Cur_Change
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_REFLESH
</UL>

<P><STRONG><a name="[ef]"></a>CH1_Measure</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, uctsk_osmeasure.o(i.CH1_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = CH1_Measure &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Get_Voltage
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
</UL>

<P><STRONG><a name="[f7]"></a>CH2_Measure</STRONG> (Thumb, 758 bytes, Stack size 48 bytes, uctsk_osmeasure.o(i.CH2_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = CH2_Measure &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Get_Voltage_CH2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floattostr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uctsk_Measure
</UL>

<P><STRONG><a name="[5a]"></a>uctsk_Measure</STRONG> (Thumb, 900 bytes, Stack size 48 bytes, uctsk_osmeasure.o(i.uctsk_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = uctsk_Measure &rArr; CH2_Measure &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_store
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS2
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_set_ch3
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH3_Measure
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2_Measure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH1_Measure
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uctsk_osmeasure.o(i.App_OSViewTaskCreate)
</UL>
<P><STRONG><a name="[1e0]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1e1]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[16e]"></a>OS_InitEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[16b]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[16c]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[16d]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[172]"></a>OS_InitTaskIdle</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[173]"></a>OS_InitTaskStat</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[178]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[197]"></a>OSTmr_InitTask</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_tmr.o(i.OSTmr_InitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook &rArr; App_TaskCreateHook &rArr; OSView_TaskCreateHook &rArr; OSView_TimeGetCycles &rArr; OSView_TmrRd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[199]"></a>OSTmr_Link</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_tmr.o(i.OSTmr_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[64]"></a>OSTmr_Task</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OSTmr_InitTask)
</UL>
<P><STRONG><a name="[198]"></a>OSTmr_Unlink</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_tmr.o(i.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[127]"></a>DataStageIn</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, usb_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[12b]"></a>DataStageOut</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usb_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[12e]"></a>Data_Setup0</STRONG> (Thumb, 550 bytes, Stack size 40 bytes, usb_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[162]"></a>NoData_Setup0</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, usb_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[20d]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[20b]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[20f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[20e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[b9]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[bf]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
